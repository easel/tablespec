{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://synaptiq.ai/schemas/gx-expectation-suite/1.6",
  "title": "Great Expectations Suite Schema (GX 1.6+)",
  "description": "Schema for validating Great Expectations 1.6+ expectation suites generated by AI",
  "type": "object",
  "required": ["name", "expectations"],
  "properties": {
    "name": {
      "type": "string",
      "pattern": "^[A-Za-z0-9_]+(_suite)?$",
      "minLength": 1,
      "maxLength": 128,
      "description": "Name of the expectation suite (GX 1.6+ field)"
    },
    "id": {
      "type": ["string", "null"],
      "description": "Unique identifier (UUID) for the suite (GX 1.6+)"
    },
    "meta": {
      "type": "object",
      "description": "Metadata about the expectation suite",
      "properties": {
        "great_expectations_version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+$",
          "description": "Version of Great Expectations"
        },
        "table_name": {
          "type": "string",
          "description": "Name of the table this suite validates"
        },
        "generated_by": {
          "type": "string",
          "description": "System or process that generated this suite"
        },
        "generation_date": {
          "type": "string",
          "format": "date",
          "description": "Date when the suite was generated"
        }
      },
      "additionalProperties": true
    },
    "expectations": {
      "type": "array",
      "description": "Array of expectation configurations",
      "items": {
        "type": "object",
        "required": ["type", "kwargs"],
        "properties": {
          "type": {
            "type": "string",
            "pattern": "^expect_.*",
            "enum": [
              "expect_column_distinct_values_to_be_in_set",
              "expect_column_distinct_values_to_contain_set",
              "expect_column_kl_divergence_to_be_less_than",
              "expect_column_max_to_be_between",
              "expect_column_mean_to_be_between",
              "expect_column_median_to_be_between",
              "expect_column_min_to_be_between",
              "expect_column_most_common_value_to_be_in_set",
              "expect_column_pair_values_a_to_be_greater_than_b",
              "expect_column_pair_values_to_be_equal",
              "expect_column_proportion_of_non_null_values_to_be_between",
              "expect_column_proportion_of_unique_values_to_be_between",
              "expect_column_stdev_to_be_between",
              "expect_column_sum_to_be_between",
              "expect_column_to_exist",
              "expect_column_unique_value_count_to_be_between",
              "expect_column_value_lengths_to_be_between",
              "expect_column_value_lengths_to_equal",
              "expect_column_values_to_be_between",
              "expect_column_values_to_be_dateutil_parseable",
              "expect_column_values_to_be_decreasing",
              "expect_column_values_to_be_in_set",
              "expect_column_values_to_be_in_type_list",
              "expect_column_values_to_be_increasing",
              "expect_column_values_to_be_json_parseable",
              "expect_column_values_to_be_null",
              "expect_column_values_to_be_of_type",
              "expect_column_values_to_be_unique",
              "expect_column_values_to_match_json_schema",
              "expect_column_values_to_match_regex",
              "expect_column_values_to_match_regex_list",
              "expect_column_values_to_match_strftime_format",
              "expect_column_values_to_not_be_in_set",
              "expect_column_values_to_not_be_null",
              "expect_column_values_to_not_match_regex",
              "expect_column_values_to_not_match_regex_list",
              "expect_compound_columns_to_be_unique",
              "expect_select_column_values_to_be_unique_within_record",
              "expect_table_column_count_to_equal",
              "expect_table_columns_to_match_ordered_list",
              "expect_table_columns_to_match_set",
              "expect_table_row_count_to_be_between",
              "expect_table_row_count_to_equal_other_table",
              "expect_validation_rule_pending_implementation"
            ],
            "description": "Type of expectation (GX 1.6+ field, formerly 'expectation_type')"
          },
          "kwargs": {
            "type": "object",
            "description": "Keyword arguments for the expectation",
            "properties": {
              "column": {
                "type": ["string", "null"],
                "description": "Column name for column-level expectations (null for table-level expectations)"
              },
              "column_A": {
                "type": "string",
                "description": "First column for pair comparisons"
              },
              "column_B": {
                "type": "string",
                "description": "Second column for pair comparisons"
              },
              "column_list": {
                "type": "array",
                "items": {"type": "string"},
                "description": "List of columns for multi-column expectations"
              },
              "column_set": {
                "type": "array",
                "items": {"type": "string"},
                "description": "Set of columns for table-level expectations (unordered)"
              },
              "value": {
                "type": ["number", "integer", "null"],
                "description": "Exact value for equality expectations (e.g., table column count)"
              },
              "value_set": {
                "type": "array",
                "description": "Set of allowed values"
              },
              "min_value": {
                "type": ["number", "null"],
                "description": "Minimum value for range expectations"
              },
              "max_value": {
                "type": ["number", "null"],
                "description": "Maximum value for range expectations"
              },
              "regex": {
                "type": "string",
                "description": "Regular expression pattern"
              },
              "regex_list": {
                "type": "array",
                "items": {"type": "string"},
                "description": "List of regex patterns"
              },
              "strftime_format": {
                "type": "string",
                "description": "Date/time format string"
              },
              "type_": {
                "type": "string",
                "description": "Expected data type"
              },
              "type_list": {
                "type": "array",
                "items": {"type": "string"},
                "description": "List of acceptable data types"
              },
              "mostly": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Fraction of values that must meet expectation (default 1.0)"
              },
              "strict_min": {
                "type": "boolean",
                "description": "Whether min_value is strictly greater than (not equal)"
              },
              "strict_max": {
                "type": "boolean",
                "description": "Whether max_value is strictly less than (not equal)"
              },
              "or_equal": {
                "type": "boolean",
                "description": "For column pair comparisons, whether values can be equal (>= vs >)"
              },
              "ignore_row_if": {
                "type": "string",
                "enum": ["both_values_are_missing", "either_value_is_missing", "neither"],
                "description": "Condition for ignoring rows in comparisons"
              },
              "output_strftime_format": {
                "type": "string",
                "description": "Format for datetime output"
              }
            },
            "additionalProperties": true
          },
          "meta": {
            "type": "object",
            "description": "Metadata for the expectation",
            "properties": {
              "description": {
                "type": "string",
                "description": "Comprehensive description of what and why this validation exists"
              },
              "severity": {
                "type": "string",
                "enum": ["critical", "warning", "info"],
                "description": "Severity level of validation failure (GX 1.6+)"
              },
              "lob": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["MD", "ME", "MP"]
                },
                "description": "Lines of business this expectation applies to"
              },
              "source": {
                "type": "string",
                "description": "Source of this validation rule"
              },
              "notes": {
                "type": "string",
                "description": "Additional notes or context"
              },
              "reason_unmappable": {
                "type": "string",
                "description": "Why this constraint cannot be mapped to standard GX (helpful for pending implementation expectations)"
              },
              "suggested_implementation": {
                "type": "string",
                "description": "Suggestion for how to implement this validation (helpful for pending implementation expectations)"
              },
              "generated_from": {
                "type": "string",
                "enum": ["baseline", "llm_table", "llm_column", "hybrid"],
                "description": "Source of expectation generation: baseline (deterministic from UMF), llm_table (LLM table-level), llm_column (LLM column-level), or hybrid (combination)"
              }
            },
            "additionalProperties": true
          },
          "id": {
            "type": ["string", "null"],
            "description": "Unique identifier (UUID) for this expectation (GX 1.6+)"
          },
          "success_on_last_run": {
            "type": ["boolean", "null"],
            "description": "Whether this expectation passed on last validation"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": true
}
